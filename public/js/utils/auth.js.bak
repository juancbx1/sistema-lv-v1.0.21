// public/js/utils/auth.js

import { permissoesDisponiveis, permissoesPorTipo } from '/js/utils/permissoes.js';

export const permissoesValidas = new Set(permissoesDisponiveis.map(p => p.id));

export async function sincronizarPermissoesUsuario(usuario) {
  if (!usuario) return null;

  const tipos = Array.isArray(usuario.tipos) ? usuario.tipos : (typeof usuario.tipos === 'string' ? [usuario.tipos] : []);
  const tipoMap = {
    'administrador': 'admin', 'tiktik': 'tiktik', 'cortador': 'cortador',
    'costureira': 'costureira', 'lider_setor': 'lider_setor', 'supervisor': 'supervisor',
  };

  const tiposMapeados = tipos.map(tipo => tipoMap[tipo.toLowerCase()] || tipo.toLowerCase());
  const isAdmin = tiposMapeados.includes('admin');

  let permissoesBase = new Set();
  tiposMapeados.forEach(tipoMapeado => {
    (permissoesPorTipo[tipoMapeado] || []).forEach(p => permissoesBase.add(p));
  });

  (usuario.permissoes || []).forEach(p => permissoesBase.add(p));

  if (isAdmin) {
    (permissoesPorTipo['admin'] || []).forEach(permissao => permissoesBase.add(permissao));
  }
  
  usuario.permissoes = Array.from(permissoesBase).filter(p => permissoesValidas.has(p));
  return usuario;
}

/**
 * Verifica a autenticação do usuário e suas permissões para acessar uma página.
 * @param {string} pagina - O nome do arquivo da página (ex: 'admin/home.html').
 * @param {string[]} permissoesRequeridas - Um array de permissões necessárias.
 * @param {'all' | 'any'} [modo='all'] - 'all' exige todas as permissões, 'any' exige pelo menos uma.
 * @returns {Promise<object|null>} Um objeto com {usuario, permissoes} ou null se a autenticação falhar.
 */
export async function verificarAutenticacao(pagina, permissoesRequeridas = [], modo = 'all') {
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('[Auth] Token não encontrado, redirecionando para login.');
    window.location.href = '/index.html';
    return null;
  }

  // Bloco de Pré-verificação com Cache (Opcional, mas rápido)
  const permissoesCache = JSON.parse(localStorage.getItem('permissoes') || '[]');
  if (permissoesCache.length > 0 && permissoesRequeridas.length > 0) {
    const temPermissaoCache = (modo === 'any')
      ? permissoesRequeridas.some(p => permissoesCache.includes(p))
      : permissoesRequeridas.every(p => permissoesCache.includes(p));
    
    if (!temPermissaoCache) {
      console.log(`[Auth Cache] Sem permissão (${modo}) para [${permissoesRequeridas.join(', ')}]. Redirecionando.`);
      window.location.href = '/admin/acesso-negado.html';
      return null;
    }
  }

  try {
    const response = await fetch('/api/usuarios/me', {
      headers: { 'Authorization': `Bearer ${token}` },
    });
    
    if (!response.ok) {
        if (response.status === 401) throw new Error('Token expirado');
        throw new Error('Falha ao verificar usuário no servidor.');
    }

    let usuarioLogado = await response.json();
    localStorage.setItem('permissoes', JSON.stringify(usuarioLogado.permissoes || []));

    // --- NOVA LÓGICA DE REDIRECIONAMENTO E ACESSO ---
    const tipos = usuarioLogado.tipos || [];
    const permissoes = usuarioLogado.permissoes || [];

    // 1. Redirecionamento baseado em tipo/permissão
    const isUsuarioProducao = tipos.includes('costureira') || tipos.includes('tiktik');
    const temAcessoAdmin = permissoes.includes('acesso-admin-geral');

    const pathAtual = window.location.pathname.toLowerCase();
    
    if (isUsuarioProducao && !temAcessoAdmin) {
        // É um usuário de produção PURO. Só pode acessar o dashboard.
        if (pathAtual !== '/dashboard/dashboard.html') {
            console.log('[Auth] Usuário de produção puro fora da página do dashboard. Redirecionando...');
            window.location.href = '/dashboard/dashboard.html';
            return null; // Interrompe a execução para a página atual carregar
        }
    } else {
        // É um admin, supervisor, ou usuário híbrido. Pode acessar a área admin.
        if (pathAtual === '/dashboard/dashboard.html') {
             console.log('[Auth] Usuário administrativo tentando acessar dashboard diretamente. Redirecionando para home admin...');
             window.location.href = '/admin/home.html';
             return null;
        }
    }
    
    // 2. Verificação de permissão para a página atual
    if (permissoesRequeridas.length > 0) {
        const temPermissao = (modo === 'any')
            ? permissoesRequeridas.some(p => permissoes.includes(p))
            : permissoesRequeridas.every(p => permissoes.includes(p));

        if (!temPermissao) {
            console.log(`[Auth API] Sem permissão (${modo}) para [${permissoesRequeridas.join(', ')}]. Redirecionando.`);
            window.location.href = '/admin/acesso-negado.html';
            return null;
        }
    }

    console.log('[Auth] Autenticação bem-sucedida.');
    document.body.classList.add('autenticado');
    return { usuario: usuarioLogado, permissoes: permissoes };

  } catch (error) {
    console.error('[Auth] Erro final na verificação:', error.message);
    localStorage.removeItem('token');
    localStorage.removeItem('permissoes');
    window.location.href = error.message === 'Token expirado' 
      ? '/admin/token-expirado.html' 
      : '/index.html';
    return null;
  }
}


export function logout() {
  console.log('--- LOGOUT INICIADO ---');
  console.log('Valor da meta ANTES do logout:', localStorage.getItem(`metaSelecionada_${usuarioLogado?.nome}`)); // Espião

  localStorage.removeItem('token');
  localStorage.removeItem('permissoes');

  console.log('Valor da meta DEPOIS de remover itens de sessão:', localStorage.getItem(`metaSelecionada_${usuarioLogado?.nome}`)); // Espião
  console.log('--- REDIRECIONANDO PARA LOGIN ---');
  window.location.href = '/index.html';
}